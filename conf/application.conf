play.http.secret.key = "f>W5L_eW:jh4NAU;V5DV35uGJvI2HwMdhLaKZYzCn42PJ_e]JpOaS^=GlkTI=o@J"
play.server.pidfile.path=/dev/null


play.i18n {
  # The application languages
  langs = [ "en" ]

}

use.local.db = true
use.local.db = ${?USE_LOCAL_DB}

play.filters {
  enabled += io.perfix.Filters
  enabled += play.filters.cors.CORSFilter
}

play.modules.enabled += "io.perfix.auth.SecurityModule"

pac4j.googleClient.baseUrl = "http://localhost:9000"
pac4j.googleClient.clientId = "*********clientId******"
pac4j.googleClient.secret = "*********secret******"

pac4j.googleClient.baseUrl = ${PAC4J_BASEURL}
pac4j.googleClient.clientId = ${PAC4J_GOOGLECLIENT_CLIENTID}
pac4j.googleClient.secret = ${PAC4J_GOOGLECLIENT_SECRET}

play.evolutions.db.default.enabled = true
play.evolutions.db.default.autoApply = true
play.evolutions.db.default.autoApplyDowns = true

slick.dbs.default.profile="slick.jdbc.PostgresProfile$"
slick.dbs.default.db.dataSourceClass = "slick.jdbc.DatabaseUrlDataSource"
slick.dbs.default.db.properties.driver = "org.postgresql.Driver"
slick.dbs.default.db.properties.url="jdbc:postgresql://localhost/mydb"
slick.dbs.default.db.properties.url=${?JDBC_POSTGRES_URL}
slick.dbs.default.db.properties.user = "myuser"
slick.dbs.default.db.properties.password = "mypassword"
slick.dbs.default.db.connectionTestQuery = "SELECT 1"

## Filter Configuration
# https://www.playframework.com/documentation/latest/Filters
# ~~~~~
# There are a number of built-in filters that can be enabled and configured
# to give Play greater security.
#
play.filters {
  ## CORS filter configuration
  # https://www.playframework.com/documentation/latest/CorsFilter
  # ~~~~~
  # CORS is a protocol that allows web applications to make requests from the browser
  # across different domains.
  # NOTE: You MUST apply the CORS configuration before the CSRF filter, as CSRF has
  # dependencies on CORS settings.
  cors {
    pathPrefixes = ["/"]
    allowedOrigins = ["http://localhost:3000"]
    allowedHttpMethods = ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
    allowedHttpHeaders = ["Accept", "Content-Type", "X-Requested-With"]
    preflightMaxAge = 3 days
  }

  ## CSRF Filter
  # https://www.playframework.com/documentation/latest/ScalaCsrf#Applying-a-global-CSRF-filter
  # https://www.playframework.com/documentation/latest/JavaCsrf#Applying-a-global-CSRF-filter
  # ~~~~~
  # Play supports multiple methods for verifying that a request is not a CSRF request.
  # The primary mechanism is a CSRF token. This token gets placed either in the query string
  # or body of every form submitted, and also gets placed in the users session.
  # Play then verifies that both tokens are present and match.
  csrf {
    # Sets the cookie to be sent only over HTTPS
    #cookie.secure = true

    # Defaults to CSRFErrorHandler in the root package.
    #errorHandler = MyCSRFErrorHandler
  }

  ## Security headers filter configuration
  # https://www.playframework.com/documentation/latest/SecurityHeaders
  # ~~~~~
  # Defines security headers that prevent XSS attacks.
  # If enabled, then all options are set to the below configuration by default:
  headers {
    # The X-Frame-Options header. If null, the header is not set.
    #frameOptions = "DENY"

    # The X-XSS-Protection header. If null, the header is not set.
    #xssProtection = "1; mode=block"

    # The X-Content-Type-Options header. If null, the header is not set.
    #contentTypeOptions = "nosniff"

    # The X-Permitted-Cross-Domain-Policies header. If null, the header is not set.
    #permittedCrossDomainPolicies = "master-only"

    # The Content-Security-Policy header. If null, the header is not set.
    #contentSecurityPolicy = "default-src 'self'"
  }

  ## Allowed hosts filter configuration
  # https://www.playframework.com/documentation/latest/AllowedHostsFilter
  # ~~~~~
  # Play provides a filter that lets you configure which hosts can access your application.
  # This is useful to prevent cache poisoning attacks.
  hosts {
    # Allow requests to example.com, its subdomains, and localhost:9000.
    allowed = ["."]
  }
}
